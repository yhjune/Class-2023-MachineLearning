# -*- coding: utf-8 -*-
"""Gradient Boosting mon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fotKHsZ6_A7c_JQIkbAJDXqrXi2fXSzp

##Prerequisite
"""

from google.colab import drive
drive.mount('/content/drive')

"""##모든 feature"""

import pickle
with open("/content/drive/MyDrive/GitHub/global/mon2.pkl", 'rb') as fi: # Path to mon_standard.pkl in Colab
    df1 = pickle.load(fi)
print("Loading mon_df1_contiuous...")

df1.head()

from sklearn.ensemble import GradientBoostingClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

X = df1[['burst_mean','burst_std', 'burst_var','total_income', 'total_outcome', 'packet_num', 'outgoing_ratio', 'incoming_ratio', 'duration','time_mean', 'time_var','size_mean','size_std','size_var','cumlative_std','cumlative_mean','cumlative_var','duration_per_packet']]
y = df1['label']

# 데이터 분할
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Gradient Boosting 모델 생성 및 학습
model = GradientBoostingClassifier(learning_rate=0.1, n_estimators=50, random_state=42)
model.fit(X_train, y_train)

from sklearn.metrics import accuracy_score, classification_report, precision_score, recall_score, confusion_matrix

y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

# Accuracy를 퍼센트로 표시
accuracy_percent = accuracy * 100
print(f'Accuracy: {accuracy_percent:.2f}%')

# Precision
precision = precision_score(y_test, y_pred, average='micro')
print(f'Precision: {precision:.2f}')

# Recall
recall = recall_score(y_test, y_pred,average='macro' )
print(f'Recall: {recall:.2f}')


# Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print('Confusion Matrix:\n', conf_matrix)